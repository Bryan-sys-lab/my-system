"""
Report Generator Module for B-Search

This module provides multi-format report generation capabilities
for AI-powered intelligence reports.
"""

from typing import Dict, Any, List, cast
from datetime import datetime, timezone
import statistics
import io
import csv

from ..storage.models import Item


class ReportGenerator:
    """Multi-format report generator for B-Search"""

    def __init__(self):
        self.supported_formats = ["markdown", "html", "json", "csv"]

    def generate_report(
        self,
        report_data: Dict[str, Any],
        format: str = "markdown",
        include_ai_insights: bool = True
    ) -> str:
        """Generate report in specified format"""

        if format not in self.supported_formats:
            raise ValueError(f"Unsupported format: {format}. Supported: {self.supported_formats}")

        if format == "markdown":
            return self._generate_markdown_report(report_data)
        elif format == "html":
            return self._generate_html_report(report_data)
        elif format == "json":
            return self._generate_json_report(report_data)
        elif format == "csv":
            return self._generate_csv_report(report_data)
        else:
            raise ValueError(f"Format {format} not implemented")

    def _generate_markdown_report(self, report_data: Dict[str, Any]) -> str:
        """Generate markdown report"""
        md = f"""# B-Search Intelligence Report

**Generated:** {report_data['metadata']['generated_at']}
**Period:** {report_data['metadata']['time_range']['start']} to {report_data['metadata']['time_range']['end']}
**Total Items:** {report_data['metadata']['total_items']:,}

## Executive Summary

{self._generate_executive_summary(report_data)}

## Key Metrics

- **Total Collections:** {report_data['summary']['total_items']:,}
- **Active Platforms:** {len(report_data['summary']['platform_breakdown'])}
- **Top Platform:** {report_data['summary']['top_platform']}
- **Avg Items/Day:** {report_data['summary']['avg_items_per_day']}

## Platform Breakdown

{self._generate_platform_table(report_data)}

## AI Insights

{self._generate_ai_insights_section(report_data)}

## Recommendations

{self._generate_recommendations_section(report_data)}

---
*Report generated by B-Search AI Analytics Engine*
"""
        return md

    def _generate_html_report(self, report_data: Dict[str, Any]) -> str:
        """Generate HTML report"""
        html = f"""<!DOCTYPE html>
<html>
<head>
    <title>B-Search Intelligence Report</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 40px; }}
        .header {{ background: #f8f9fa; padding: 20px; border-radius: 8px; }}
        .metric {{ background: #e9ecef; padding: 15px; margin: 10px 0; border-radius: 5px; }}
        .insights {{ background: #d4edda; padding: 15px; margin: 10px 0; border-radius: 5px; }}
        table {{ width: 100%; border-collapse: collapse; margin: 20px 0; }}
        th, td {{ padding: 12px; text-align: left; border-bottom: 1px solid #ddd; }}
        th {{ background-color: #f8f9fa; }}
    </style>
</head>
<body>
    <div class="header">
        <h1>B-Search Intelligence Report</h1>
        <p><strong>Generated:</strong> {report_data['metadata']['generated_at']}</p>
        <p><strong>Period:</strong> {report_data['metadata']['time_range']['start']} to {report_data['metadata']['time_range']['end']}</p>
        <p><strong>Total Items:</strong> {report_data['metadata']['total_items']:,}</p>
    </div>

    <div class="metric">
        <h2>Key Metrics</h2>
        <ul>
            <li><strong>Total Collections:</strong> {report_data['summary']['total_items']:,}</li>
            <li><strong>Active Platforms:</strong> {len(report_data['summary']['platform_breakdown'])}</li>
            <li><strong>Top Platform:</strong> {report_data['summary']['top_platform']}</li>
            <li><strong>Avg Items/Day:</strong> {report_data['summary']['avg_items_per_day']}</li>
        </ul>
    </div>

    {self._generate_platform_table_html(report_data)}

    {self._generate_ai_insights_html(report_data)}

    <div class="metric">
        <h2>Recommendations</h2>
        <ul>
            <li>Monitor {report_data['summary']['top_platform']} platform closely due to high activity</li>
            <li>Consider expanding collection to underrepresented platforms</li>
            <li>Schedule regular AI-powered trend analysis</li>
        </ul>
    </div>

    <footer style="margin-top: 40px; padding: 20px; background: #f8f9fa; border-radius: 8px;">
        <p><em>Report generated by B-Search AI Analytics Engine</em></p>
    </footer>
</body>
</html>"""
        return html

    def _generate_json_report(self, report_data: Dict[str, Any]) -> str:
        """Generate JSON report"""
        import json
        return json.dumps(report_data, indent=2, default=str)

    def _generate_csv_report(self, report_data: Dict[str, Any]) -> str:
        """Generate CSV report"""
        output = io.StringIO()
        writer = csv.writer(output)

        # Write overview data
        writer.writerow(["Section", "Metric", "Value"])
        for key, value in report_data.get("summary", {}).items():
            if isinstance(value, dict):
                for sub_key, sub_value in value.items():
                    writer.writerow([key, sub_key, str(sub_value)])
            else:
                writer.writerow(["summary", key, str(value)])

        # Write insights
        writer.writerow([])
        writer.writerow(["AI Insights"])
        for insight in report_data.get("key_insights", []):
            writer.writerow([insight.get("type", ""), insight.get("insight", ""), insight.get("priority", "")])

        return output.getvalue()

    def _generate_executive_summary(self, report_data: Dict[str, Any]) -> str:
        """Generate executive summary for reports"""
        summary = report_data.get('summary', {})
        total_items = summary.get('total_items', 0)
        trend = report_data.get('trend_analysis', {}).get('trend', 'stable')

        return f"""During the reporting period, B-Search collected {total_items:,} items across {len(summary.get('platform_breakdown', {}))} platforms. The analysis reveals {trend} trends with high confidence levels. Key insights include emerging patterns and actionable recommendations for strategic decision-making."""

    def _generate_platform_table(self, report_data: Dict[str, Any]) -> str:
        """Generate platform breakdown table for markdown"""
        platforms = report_data['summary']['platform_breakdown']

        table = "| Platform | Items | Percentage |\n|----------|-------|------------|\n"

        total = sum(platforms.values())
        for platform, count in sorted(platforms.items(), key=lambda x: x[1], reverse=True):
            percentage = (count / total) * 100
            table += f"| {platform} | {count:,} | {percentage:.1f}% |\n"

        return table

    def _generate_platform_table_html(self, report_data: Dict[str, Any]) -> str:
        """Generate platform breakdown table for HTML"""
        platforms = report_data['summary']['platform_breakdown']

        html = '<div class="metric"><h2>Platform Breakdown</h2><table>'
        html += '<tr><th>Platform</th><th>Items</th><th>Percentage</th></tr>'

        total = sum(platforms.values())
        for platform, count in sorted(platforms.items(), key=lambda x: x[1], reverse=True):
            percentage = (count / total) * 100
            html += f'<tr><td>{platform}</td><td>{count:,}</td><td>{percentage:.1f}%</td></tr>'

        html += '</table></div>'
        return html

    def _generate_ai_insights_section(self, report_data: Dict[str, Any]) -> str:
        """Generate AI insights section for markdown"""
        insights = report_data.get('key_insights', [])
        if not insights:
            return "### AI Insights\nNo AI insights available for this report."

        trend = report_data.get('trend_analysis', {})
        sentiment = report_data.get('sentiment_analysis', {})

        section = "### AI Insights\n\n"

        if trend:
            section += f"**Trend Analysis:** {trend.get('trend', 'Unknown').title()} trend detected "
            section += f"with {trend.get('confidence', 0)*100:.0f}% confidence. "
            section += f"Recent activity shows {trend.get('change_percentage', 0):+.1f}% change.\n\n"

        if sentiment:
            section += f"**Sentiment Analysis:** Overall sentiment is {sentiment.get('overall', 'neutral')} "
            section += f"with {sentiment.get('confidence', 0)*100:.0f}% confidence.\n\n"

        if insights:
            section += "**Key Insights:**\n"
            for insight in insights[:3]:
                section += f"- {insight.get('insight', '')} ({insight.get('priority', 'medium')} priority)\n"

        return section

    def _generate_ai_insights_html(self, report_data: Dict[str, Any]) -> str:
        """Generate AI insights section for HTML"""
        insights = report_data.get('key_insights', [])
        trend = report_data.get('trend_analysis', {})

        html = '<div class="insights"><h2>AI Insights</h2>'

        if trend:
            html += f'<p><strong>Trend Analysis:</strong> {trend.get("trend", "Unknown").title()} trend detected '
            html += f'with {trend.get("confidence", 0)*100:.0f}% confidence. '
            html += f'Recent activity shows {trend.get("change_percentage", 0):+.1f}% change.</p>'

        if insights:
            html += '<ul>'
            for insight in insights[:3]:
                html += f"<li>{insight.get('insight', '')} ({insight.get('priority', 'medium')} priority)</li>"
            html += '</ul>'

        html += '</div>'
        return html

    def _generate_recommendations_section(self, report_data: Dict[str, Any]) -> str:
        """Generate recommendations section"""
        recommendations = report_data.get('recommendations', [])
        summary = report_data.get('summary', {})
        top_platform = summary.get('top_platform', 'Unknown')

        default_recs = [
            f"Monitor {top_platform} platform closely due to high activity levels",
            "Consider expanding collection to underrepresented platforms for broader coverage",
            "Schedule regular AI-powered trend analysis to identify emerging patterns",
            "Implement automated alerts for significant changes in collection volumes",
            "Review content quality metrics and adjust collection strategies as needed"
        ]

        if recommendations:
            recs = [rec.get('recommendation', '') for rec in recommendations[:5]]
        else:
            recs = default_recs

        return "\n".join(f"- {rec}" for rec in recs)

    def generate_report_summary(self, items: List[Item], report_type: str) -> Dict[str, Any]:
        """Generate report summary"""
        if not items:
            return {}

        total_items = len(items)
        platforms = {}
        for item in items:
            platform = item.meta.get('platform', 'unknown') if item.meta else 'unknown'
            platforms[platform] = platforms.get(platform, 0) + 1

        # Convert created_at to concrete datetimes for safe operations
        created_list = [cast(datetime, item.created_at) for item in items] if items else []
        min_created = min(created_list) if created_list else None
        max_created = max(created_list) if created_list else None

        # Use Counter-style most common via sorting for plain dict
        top_platform = None
        if platforms:
            top_platform = sorted(platforms.items(), key=lambda x: x[1], reverse=True)[0][0]

        return {
            "total_items": total_items,
            "date_range": {
                "start": min_created.isoformat() if min_created else None,
                "end": max_created.isoformat() if max_created else None
            },
            "platform_breakdown": platforms,
            "top_platform": top_platform,
            "avg_items_per_day": round(total_items / max(1, (datetime.now(timezone.utc) - min_created).days), 2) if min_created else 0
        }

    def generate_report_analytics(self, items: List[Item]) -> Dict[str, Any]:
        """Generate detailed analytics for reports"""
        if not items:
            return {}
        # Content length analysis
        content_lengths = [len(str(item.content or "")) for item in items if item.content is not None]
        avg_content_length = statistics.mean(content_lengths) if content_lengths else 0

        # Temporal analysis
        hours = [item.created_at.hour for item in items]
        peak_hour = statistics.mode(hours) if hours else None

        return {
            "content_analysis": {
                "average_length": round(avg_content_length, 2),
                "total_characters": sum(content_lengths),
                "content_distribution": {
                    "short": len([l for l in content_lengths if l < 100]),
                    "medium": len([l for l in content_lengths if 100 <= l < 500]),
                    "long": len([l for l in content_lengths if l >= 500])
                }
            },
            "temporal_analysis": {
                "peak_hour": peak_hour,
                "most_active_day": "Tuesday",  # Mock
                "collection_pattern": "consistent"
            },
            "quality_metrics": {
                "completion_rate": 0.95,  # Mock
                "data_quality_score": 0.87  # Mock
            }
        }